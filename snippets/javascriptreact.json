{
  "console.log()": {
  "prefix":"log",
  "body": [
  "console.log($1);$0"
  ],
  "description":"console log"
  },
  "constructor()": {
  "prefix":"cons",
  "body": [
  "constructor(props) {",
  "\tsuper(props);",
  "\t$1",
  "}$0"
  ],
  "description":"The constructor for a React component is called before it is mounted. When implementing the constructor for a React.Component subclass, you should call super(props) before any other statement. Otherwise, this.props will be undefined in the constructor, which can lead to bugs.\nAvoid introducing any side-effects or subscriptions in the constructor. For those use cases, use componentDidMount() instead.\nThe constructor is the right place to initialize state. To do so, just assign an object to this.state; don’t try to call setState() from the constructor. The constructor is also often used to bind event handlers to the class instance.\nIf you don’t initialize state and you don’t bind methods, you don’t need to implement a constructor for your React component."
  },
  "componentDidMount()": {
  "prefix":"cdm",
  "body": [
  "componentDidMount() {",
  "\t$1",
  "}$0"
  ],
  "description":"componentDidMount() is invoked immediately after a component is mounted. Initialization that requires DOM nodes should go here. If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\nThis method is a good place to set up any subscriptions. If you do that, don’t forget to unsubscribe in componentWillUnmount().\nCalling setState() in this method will trigger an extra rendering, but it will happen before the browser updates the screen. This guarantees that even though the render() will be called twice in this case, the user won’t see the intermediate state. Use this pattern with caution because it often causes performance issues. It can, however, be necessary for cases like modals and tooltips when you need to measure a DOM node before rendering something that depends on its size or position."
  },
  "getDerivedStateFromProps()": {
  "prefix":"gdsfp",
  "body": [
  "static getDerivedStateFromProps(nextProps, prevState) {",
  "\tif($1) {",
  "\t\t$2",
  "\t}",
  "return null;",
  "}$0"
  ],
  "description":"getDerivedStateFromProps is invoked after a component is instantiated as well as when it receives new props. It should return an object to update state, or null to indicate that the new props do not require any state updates. Note that if a parent component causes your component to re-render, this method will be called even if props have not changed. You may want to compare new and previous values if you only want to handle changes."
  },
  "getSnapshotBeforeUpdate()": {
  "prefix":"gsbu",
  "body": [
  "getSnapshotBeforeUpdate(prevProps, prevState) {",
  "\t$1",
  "}"
  ],
  "description":"getSnapshotBeforeUpdate() is invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture current values (e.g. scroll position) before they are potentially changed. Any value returned by this lifecycle will be passed as a parameter to componentDidUpdate()."
  },
  "shouldComponentUpdate()": {
  "prefix":"scu",
  "body": [
  "shouldComponentUpdate(nextProps, nextState) {",
  "\t$1",
  "}$0"
  ],
  "description":"Use shouldComponentUpdate() to let React know if a component’s output is not affected by the current change in state or props. The default behavior is to re-render on every state change, and in the vast majority of cases you should rely on the default behavior.\nshouldComponentUpdate() is invoked before rendering when new props or state are being received. Defaults to true. This method is not called for the initial render or when forceUpdate() is used.\nReturning false does not prevent child components from re-rendering when their state changes.\nCurrently, if shouldComponentUpdate() returns false, then componentWillUpdate(), render(), and componentDidUpdate() will not be invoked. Note that in the future React may treat shouldComponentUpdate() as a hint rather than a strict directive, and returning false may still result in a re-rendering of the component.\nIf you determine a specific component is slow after profiling, you may change it to inherit from React.PureComponent which implements shouldComponentUpdate() with a shallow prop and state comparison. If you are confident you want to write it by hand, you may compare this.props with nextProps and this.state with nextState and return false to tell React the update can be skipped.\nWe do not recommend doing deep equality checks or using JSON.stringify() in shouldComponentUpdate(). It is very inefficient and will harm performance."
  },
  "componentDidUpdate()": {
  "prefix":"cdu",
  "body": [
  "componentDidUpdate(prevProps, prevState) {",
  "\t$1",
  "}$0"
  ],
  "description":"componentDidUpdate() is invoked immediately after updating occurs. This method is not called for the initial render.\nUse this as an opportunity to operate on the DOM when the component has been updated. This is also a good place to do network requests as long as you compare the current props to previous props (e.g. a network request may not be necessary if the props have not changed).\nNote: componentDidUpdate() will not be invoked if shouldComponentUpdate() returns false."
  },
  "componentWillUnmount()": {
  "prefix":"cwun",
  "body": [
  "componentWillUnmount() {",
  "\t$1",
  "}$0"
  ],
  "description":"componentWillUnmount() is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any subscriptions that were created in componentDidMount()."
  },
  "componentDidCatch()": {
  "prefix":"cdc",
  "body": [
  "componentDidCatch(err, info) {",
  "\t$1",
  "}$0"
  ],
  "description":"Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.\nA class component becomes an error boundary if it defines this lifecycle method. Calling setState() in it lets you capture an unhandled JavaScript error in the below tree and display a fallback UI. Only use error boundaries for recovering from unexpected exceptions; don’t try to use them for control flow.\nNote: Error boundaries only catch errors in the components below them in the tree. An error boundary can’t catch an error within itself."
  },
  "render()": {
  "prefix":"ren",
  "body": [
  "render() {",
  "\treturn($1)",
  "}$0"
  ]
  },
  "React Stateless Functional Component": {
  "prefix":"rsfc",
  "description":"The simplest Component flavor in React.",
  "body": [
  "const ${1:ComponentName} = (${2:props}) => {",
  "\treturn(<div>$3</div>);",
  "};$0",
  "",
  "$1.propTypes = {};",
  "$1.defaultProps = {};"
  ]
  },
  "React Component": {
  "prefix":"rc",
  "description":"The stateful Component flavor in React.",
  "body": [
  "export class ${1:ComponentName} extends ${2:ComponentType} {",
  "\tstatic propTypes = {};",
  "",
  "\tstatic defaultProps = {};",
  "",
  "\tstate = {};",
  "",
  "\trender() {",
  "\t\treturn(<div>$3</div>);",
  "\t}",
  "};$0"
  ]
  }
}